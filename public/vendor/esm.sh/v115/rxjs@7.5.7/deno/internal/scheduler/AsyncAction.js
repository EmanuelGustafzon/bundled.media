/* esm.sh - esbuild bundle(rxjs@7.5.7/internal/scheduler/AsyncAction) deno production */
import{Action as h}from"/v115/rxjs@7.5.7/deno/internal/scheduler/Action.js";import{intervalProvider as n}from"/v115/rxjs@7.5.7/deno/internal/scheduler/intervalProvider.js";import{arrRemove as c}from"/v115/rxjs@7.5.7/deno/internal/util/arrRemove.js";var l=class extends h{constructor(t,e){super(t,e),this.scheduler=t,this.work=e,this.pending=!1}schedule(t,e=0){var s;if(this.closed)return this;this.state=t;let i=this.id,r=this.scheduler;return i!=null&&(this.id=this.recycleAsyncId(r,i,e)),this.pending=!0,this.delay=e,this.id=(s=this.id)!==null&&s!==void 0?s:this.requestAsyncId(r,this.id,e),this}requestAsyncId(t,e,s=0){return n.setInterval(t.flush.bind(t,this),s)}recycleAsyncId(t,e,s=0){if(s!=null&&this.delay===s&&this.pending===!1)return e;e!=null&&n.clearInterval(e)}execute(t,e){if(this.closed)return new Error("executing a cancelled action");this.pending=!1;let s=this._execute(t,e);if(s)return s;this.pending===!1&&this.id!=null&&(this.id=this.recycleAsyncId(this.scheduler,this.id,null))}_execute(t,e){let s=!1,i;try{this.work(t)}catch(r){s=!0,i=r||new Error("Scheduled action threw falsy error")}if(s)return this.unsubscribe(),i}unsubscribe(){if(!this.closed){let{id:t,scheduler:e}=this,{actions:s}=e;this.work=this.state=this.scheduler=null,this.pending=!1,c(s,this),t!=null&&(this.id=this.recycleAsyncId(e,t,null)),this.delay=null,super.unsubscribe()}}};export{l as AsyncAction};
//# sourceMappingURL=AsyncAction.js.map