/* esm.sh - esbuild bundle(rxjs@7.5.7/internal/observable/ConnectableObservable) deno production */
import{Observable as o}from"/v115/rxjs@7.5.7/deno/internal/Observable.js";import{Subscription as i}from"/v115/rxjs@7.5.7/deno/internal/Subscription.js";import{refCount as r}from"/v115/rxjs@7.5.7/deno/internal/operators/refCount.js";import{createOperatorSubscriber as c}from"/v115/rxjs@7.5.7/deno/internal/operators/OperatorSubscriber.js";import{hasLift as u}from"/v115/rxjs@7.5.7/deno/internal/util/lift.js";var s=class extends o{constructor(t,e){super(),this.source=t,this.subjectFactory=e,this._subject=null,this._refCount=0,this._connection=null,u(t)&&(this.lift=t.lift)}_subscribe(t){return this.getSubject().subscribe(t)}getSubject(){let t=this._subject;return(!t||t.isStopped)&&(this._subject=this.subjectFactory()),this._subject}_teardown(){this._refCount=0;let{_connection:t}=this;this._subject=this._connection=null,t?.unsubscribe()}connect(){let t=this._connection;if(!t){t=this._connection=new i;let e=this.getSubject();t.add(this.source.subscribe(c(e,void 0,()=>{this._teardown(),e.complete()},n=>{this._teardown(),e.error(n)},()=>this._teardown()))),t.closed&&(this._connection=null,t=i.EMPTY)}return t}refCount(){return r()(this)}};export{s as ConnectableObservable};
//# sourceMappingURL=ConnectableObservable.js.map